#!/usr/bin/python3

import argparse
import cgi
import configparser
import datetime
import hashlib
import pathlib
import secrets
import sys

CHRSET_NUM	= "0123456789"
CHRSET_alpha	= "abcdefghijklmnopqrstuvwxyz"
CHRSET_ALPHA	= CHRSET_alpha.upper()
CHRSET_ALNUM	= CHRSET_NUM + CHRSET_alpha + CHRSET_ALPHA
CHRSET_af	= "abcdef"
CHRSET_AF	= CHRSET_af.upper()
CHRSET_HEX	= CHRSET_NUM + CHRSET_af + CHRSET_AF

class ConfigReader(object):
	def __init__(self, path):
		try:
			self.__p = configparser.ConfigParser()
			self.__p.read(path)
		except configparser.Error as e:
			raise Exception("Failed to parse config.")

	def __get(self, section, option):
		try:
			return self.__p.get(section, option)
		except configparser.Error as e:
			raise Exception(f"Failed to parse config {section}/{option}.")

	def __getlist(self, section, optionbase):
		try:
			return [ v[1]
				 for v in self.__p.items(section)
				 if v[0].startswith(optionbase) ]
		except configparser.Error as e:
			raise Exception("Failed to parse config list {section}/{optionbase}.")

	@property
	def targetdir(self):
		return self.__get("BASE", "targetdir")

	@property
	def user(self):
		return self.__get("CREDENTIALS", "user")

	@property
	def pw(self):
		fields = self.__get("CREDENTIALS", "pw").split(":")
		try:
			if fields[2] != "pbkdf2hmac":
				raise ValueError
			return (bytes.fromhex(fields[0]),	# password hash
				bytes.fromhex(fields[1]),	# salt
				fields[3].strip().lower(),	# kdf hash function
				int(fields[4])			# kdf iterations
			)
		except (IndexError, ValueError) as e:
			raise Exception(f"Failed to parse config CREDENTIALS/pw.")

	@property
	def domains(self):
		return self.__getlist("DOMAINS", "domain")

def out(s=""):
	print(s, "\r\n", file=sys.stdout, sep="", end="")

def error(msg):
#	out(msg)
	raise Exception(msg)

def update(conf, domain, ip4, ip6, ip6pfx):
	if not all(c in CHRSET_ALNUM for c in domain):
		return error("Invalid domain characters.")
	with open(f"{conf.targetdir}/{domain}", "w") as f:
		f.write(f"ip4={ip4}\n"
		        f"ip6={ip6}\n"
		        f"ip6pfx={ip6pfx}\n"
			f"updated={datetime.datetime.now().isoformat()}\n")
	out("Ok.")
	return 0

def checkCredentials(conf, user, pw):
	phashExp, salt, kdfHash, kdfIter = conf.pw
	phashAct = hashlib.pbkdf2_hmac(hash_name=kdfHash,
				       password=pw.encode("UTF-8"),
				       salt=salt,
				       iterations=kdfIter)
	ok = bool(secrets.compare_digest(user, conf.user))
	ok &= bool(secrets.compare_digest(phashAct, phashExp))
	return ok

def runAdminCmds(conf, args):
	if args.hash_pw is not None:
		salt = secrets.token_bytes(args.salt_bytes)
		phash = hashlib.pbkdf2_hmac(hash_name=args.kdf_hash.lower(),
					    password=args.hash_pw.encode("UTF-8"),
					    salt=salt,
					    iterations=args.kdf_iter)
		print(f"pw="
		      f"{phash.hex()}:"
		      f"{salt.hex()}:"
		      f"pbkdf2hmac:"
		      f"{args.kdf_hash.lower()}:"
		      f"{args.kdf_iter}")
		return 0
	return 1

def main():
	p = argparse.ArgumentParser()
	p.add_argument("-c", "--config", type=pathlib.Path,
		       default=pathlib.Path("/etc/dyndns-update.conf"),
		       help="Path to configuration file.")
	p.add_argument("-p", "--hash-pw", type=str,
		       help="Hash a password string, then exit.")
	p.add_argument("-H", "--kdf-hash", type=str,
		       default="sha256",
		       help="Hash function for --hash-pw.")
	p.add_argument("-I", "--kdf-iter", type=int,
		       default=1000,
		       help="Number of KDF iterations for --hash-pw.")
	p.add_argument("-S", "--salt-bytes", type=int,
		       default=16,
		       help="Number of salt bytes for --hash-pw.")
	args = p.parse_args()

	conf = ConfigReader(args.config)

	if args.hash_pw is not None:
		return runAdminCmds(conf=conf, args=args)

	out("Content-type: text/plain")
	out()

	form = cgi.FieldStorage()

	user = form.getfirst("user", "")
	pw = form.getfirst("pw", "")
	if not checkCredentials(conf=conf, user=user, pw=pw):
		return error("Invalid credentials.")

	domain = form.getfirst("domain", "")
	ip4 = form.getfirst("ip4", "")
	ip6 = form.getfirst("ip6", "")
	ip6pfx = form.getfirst("ip6pfx", "")

	if (not domain or
	    len(domain) > 64 or
	    not all(c in CHRSET_ALNUM for c in domain)):
		return error("Invalid domain.")

	if domain not in conf.domains:
		return error("Unknown domain.")

	if (len(ip4) > (4*3)+3 or
	    not all(c in (CHRSET_NUM + ".") for c in ip4)):
		return error("Invalid ip4")

	if (len(ip6) > (8*4)+7 or
	    not all(c in (CHRSET_HEX + ":") for c in ip6)):
		return error("Invalid ip6")

	if (len(ip6pfx) > (8*4)+7+1+3 or
	    not all(c in (CHRSET_HEX + ":/") for c in ip6pfx)):
		return error("Invalid ip6pfx")

	return update(conf=conf,
		      domain=domain,
		      ip4=ip4,
		      ip6=ip6,
		      ip6pfx=ip6pfx)

sys.exit(main())

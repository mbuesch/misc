#
# Release script library
# Copyright (c) 2012-2014 Michael Buesch <m@bues.ch>
#

# Default hooks
default_hook_nothing()
{
	true
}

default_hook_required()
{
	die "ERROR: Must supply hook_$1()"
}

default_hook_post_checkout()
{
	cd "$1"
	find "$1" \( \
		\( -name 'makerelease*' \) -o \
		\( -name '.git*' \) \
	\) -print0 | xargs -0 rm -r
}

default_hook_testbuild()
{
	cd "$1"
	if [ -x ./configure ]; then
		./configure
	fi
	if [ -r ./CMakeLists.txt ]; then
		cmake .
	fi
	if [ -r ./GNUmakefile -o -r ./makefile -o -r ./Makefile ]; then
		make
	fi
	if [ -x ./setup.py ]; then
		./setup.py build
	fi
}

# Assign default hooks
hook_pre_checkout()		{ default_hook_nothing "$@"; }
hook_post_checkout()		{ default_hook_post_checkout "$@"; }
hook_pre_relocate_checkout()	{ default_hook_nothing "$@"; }
hook_post_relocate_checkout()	{ default_hook_nothing "$@"; }
hook_pre_archives()		{ default_hook_nothing "$@"; }
hook_post_archives()		{ default_hook_nothing "$@"; }
hook_testbuild()		{ default_hook_testbuild "$@"; }
hook_regression_tests()		{ default_hook_nothing "$@"; }
hook_pre_checkout_remove()	{ default_hook_nothing "$@"; }
hook_post_checkout_remove()	{ default_hook_nothing "$@"; }
hook_pre_archive_signatures()	{ default_hook_nothing "$@"; }
hook_post_archive_signatures()	{ default_hook_nothing "$@"; }
hook_pre_tag()			{ default_hook_nothing "$@"; }
hook_post_tag()			{ default_hook_nothing "$@"; }
hook_pre_move_files()		{ default_hook_nothing "$@"; }
hook_post_move_files()		{ default_hook_nothing "$@"; }
hook_get_version()		{ default_hook_required get_version; }

cleanup()
{
	[ -d "$tmpdir" ] && rm -rf "$tmpdir"
}

# $1=code
abort()
{
	cleanup
	exit $1
}

# $*=message
die()
{
	echo "$*"
	abort 1
}

terminating_signal()
{
	die "Terminating signal received"
}

# $*=message
info()
{
	echo "--- $*"
}

is_dry_run()
{
	[ $opt_dryrun -ne 0 ]
}

dry_run_prefix()
{
	is_dry_run && echo -n "echo dry-run " || true
}

# $1=program_name, $2+=program_args
dry_run()
{
	$(dry_run_prefix) "$@"
}

# $1=program_name
have_program()
{
	which "$1" >/dev/null 2>&1
}

# $1=program_name, ($2=description)
assert_program()
{
	local bin="$1"
	local desc="$2"
	[ -n "$desc" ] || desc="$bin"
	have_program "$bin" || die "$bin not found. Please install $desc."
}

# $1=hook_name, $2+=hook_parameters
execute_hook()
{
	local hook_name="hook_$1"
	shift
	set -e
	eval $hook_name "$@"
	set +e
}

detect_repos_type()
{
	[ -z "$repos_type" -a -d "$srcdir/.git" ] && repos_type=git
	[ -z "$repos_type" ] && repos_type=none
	case "$repos_type" in
		none|git) ;; # ok
		*) die "Invalid \$repos_type=$repos_type" ;;
	esac
}

make_checkout()
{
	checkout_dir="$tmpdir/$project-checkout"
	mkdir -p "$checkout_dir" || die "Failed to make checkout dir"
	execute_hook pre_checkout "$checkout_dir"
	case "$repos_type" in
	none)
		info "Copying source tree"
		cp -r "$srcdir" "$checkout_dir" || \
			die "Failed to copy source tree"
		;;
	git)
		info "Creating git checkout"
		assert_program git
		local branch=master
		[ -n "$opt_ref" ] && branch="$opt_ref"
		export GIT_DIR="$checkout_dir/.git"
		git clone --shared --no-checkout \
			"$srcdir/.git" "$checkout_dir" || \
			die "Failed to clone git repository"
		cd "$checkout_dir" || die "Internal error: cd"
		git checkout -b "__tmp_makerelease-$branch" "$branch" || \
			die "git checkout failed"
		rm -r "$GIT_DIR" # Don't need that anymore
		;;
	*)
		die "checkout: Unknown repos_type"
		;;
	esac
	execute_hook post_checkout "$checkout_dir"
}

detect_versioning()
{
	version=
	release_name=
	execute_hook get_version "$checkout_dir/$srcsubdir"
	[ -n "$version" ] || die "\$version not set in hook_get_version()"
	version="${version}${opt_extraversion}"
	[ -n "$release_name" ] || release_name="$project-$version"
}

relocate_checkout()
{
	execute_hook pre_relocate_checkout "$tmpdir" "$checkout_dir"
	local new_checkout_dir="$tmpdir/$release_name"
	mv "$checkout_dir/$srcsubdir" "$new_checkout_dir" || \
		die "Failed to relocate checkout"
	rm -rf "$checkout_dir"
	checkout_dir="$new_checkout_dir"
	execute_hook post_relocate_checkout "$tmpdir" "$checkout_dir"
}

make_archives()
{
	archive_dir="$tmpdir/$project-archives"
	mkdir -p "$archive_dir" || die "Failed to create archive directory"

	archive_files=

	info "Creating archives"
	execute_hook pre_archives "$archive_dir" "$checkout_dir"
	for artype in $opt_archives; do
		local archive=
		local opts=
		case "$artype" in
		tar)
			archive="$release_name.tar"
			;;
		tar.bz2)
			opts="$opts -j"
			archive="$release_name.tar.bz2"
			;;
		tar.gz)
			opts="$opts -z"
			archive="$release_name.tar.gz"
			;;
		tar.xz)
			opts="$opts -J"
			archive="$release_name.tar.xz"
			;;
		zip)
			archive="$release_name.zip"
			;;
		7z)
			archive="$release_name.7z"
			;;
		*)
			die "Internal error: archive type"
			;;
		esac

		archive_files="$archive_files $archive"

		info "Creating $archive"
		cd "$tmpdir" || die "Internal error: cd"
		case "$artype" in
		zip)
			zip -9 -r "$archive" "$release_name" || \
				die "Failed to create ZIP archive"
			;;
		7z)
			7z -mx=9 a "$archive" "$release_name" || \
				die "Failed to create 7-ZIP archive"
			;;
		*)
			tar --owner=root --group=root \
			    -c $opts -f "$archive" "$release_name" || \
				die "Failed to create tarball"
			;;
		esac
		mv "$archive" "$archive_dir"/ || die "Failed to move archive"
	done
	execute_hook post_archives "$archive_dir" "$checkout_dir"
}

make_testbuild()
{
	[ $opt_nobuild -eq 0 ] || return
	info "Running test build"
	execute_hook testbuild "$checkout_dir"
}

make_regression_tests()
{
	[ $opt_nobuild -eq 0 ] || return
	[ $opt_notests -eq 0 ] || return
	info "Running regression tests"
	execute_hook regression_tests "$checkout_dir"
}

make_checkout_remove()
{
	info "Removing the checkout"
	execute_hook pre_checkout_remove "$checkout_dir" "$tmpdir"
	rm -rf "$checkout_dir" || die "Failed to remove checkout"
	execute_hook post_checkout_remove "$checkout_dir" "$tmpdir"
}

make_archive_signatures()
{
	[ $opt_nosign -ne 0 ] && return

	execute_hook pre_archive_signatures "$archive_dir"

	local gpg_opts=
	[ -n "$GPG_KEY_RELEASE" ] && gpg_opts="--default-key $GPG_KEY_RELEASE"

	for archive in $archive_files; do
		local signature="$archive.asc"

		info "Creating signature $signature"
		cd "$archive_dir" || die "Internal error: cd"
		local gpg=gpg
		have_program gpg2 && gpg=gpg2
		assert_program $gpg "GNU Privacy Guard"
		$gpg $gpg_opts -ab "$archive_dir/$archive" || die "Failed to sign $archive"
	done
	execute_hook post_archive_signatures "$archive_dir"
}

make_tag()
{
	[ $opt_notag -ne 0 ] && return
	[ "$repos_type" = "none" ] && return
	info "Tagging repository"
	tag_name="$project-$version"
	tag_message="$project-$version release"
	execute_hook pre_tag "$srcdir"
	cd "$srcdir" || die "Internal error: cd"
	case "$repos_type" in
	git)
		assert_program git
		local opts=
		[ $opt_nosign -eq 0 ] && {
			[ -n "$GPG_KEY_RELEASE" ] && {
				opts="$opts -u $GPG_KEY_RELEASE"
			} || {
				opts="$opts -s" # default key
			}
		} || {
			opts="$opts -a" # unsigned
		}
		local branch=master
		[ -n "$opt_ref" ] && branch="$opt_ref"
		export GIT_DIR="$srcdir/.git"
		dry_run git tag $opts -m "$tag_message" "$tag_name" "$branch"
		;;
	*)
		die "tagging: Unknown repos_type"
		;;
	esac
	execute_hook post_tag "$srcdir"
}

move_files()
{
	info "Moving files"
	execute_hook pre_move_files "$archive_dir" "$srcdir/$srcsubdir"
	dry_run mv "$archive_dir"/* "$srcdir/$srcsubdir" || \
		die "Failed to move tarball"
	execute_hook post_move_files "$archive_dir" "$srcdir/$srcsubdir"

	local dry=
	is_dry_run && dry=" (DRY RUN)"
	echo
	info "Built $project release ${version}${dry}"
}

help()
{
	echo "Usage: $0 [OPTIONS]"
	echo
	echo "Environment:"
	echo "  MAKERELEASE_LIB       May be set to makerelease.lib"
	echo
	echo "Options:"
	echo "  --dry-run             Do not make persistent changes"
	echo "  -t|--no-tag           Do not create the repository tag"
	echo "  -s|--no-sign          Do not sign"
	echo "  -b|--no-build         Do not run build. (implies no regression tests)"
	echo "  -T|--no-tests         Do not run regression tests"
	echo "  -r|--ref REF          Checkout version control reference REF"
	echo "  -a|--archives TYPE,TYPE,...   Archive type list. Default: tar.bz2"
	echo "                        Possible types: tar, tar.bz2, tar.gz, tar.xz, zip, 7z"
	echo "  -V|--extraversion XX  Append XX to version string"
	echo "  -h|--help             Show this help text"
}

# This is the main function called from the main script.
# Parameters to this functions must be the main script arguments.
makerelease()
{
	[ -n "$project" ] || die "\$project variable not set"
	[ -n "$srcdir" ] || die "\$srcdir variable not set"
	[ -n "$srcsubdir" ] || srcsubdir=""
	[ -n "$tmp_basedir" ] || tmp_basedir="/tmp"

	trap terminating_signal TERM INT
	trap cleanup EXIT

	local template="makerelease-$project.XXXXXXXX"
	tmpdir="$(mktemp -d --tmpdir="$tmp_basedir" "$template")"
	[ -d "$tmpdir" ] || die "Failed to create temporary directory"

	# Backwards compatibility for old default_compress option
	[ -n "$default_compress" -a -z "$default_archives" ] && default_archives="$default_compress"

	opt_dryrun=0
	opt_notag=0
	opt_nosign=0
	opt_nobuild=0
	opt_notests=0
	opt_ref=
	opt_archives="$default_archives"
	[ -n "$opt_archives" ] || opt_archives="tar.bz2"
	opt_extraversion=

	while [ $# -ge 1 ]; do
		case "$1" in
		--help|-h)
			help "$@"
			abort 0
			;;
		--dry-run)
			opt_dryrun=1
			;;
		-t|--no-tag)
			opt_notag=1
			;;
		-s|--no-sign)
			opt_nosign=1
			;;
		-b|--no-build)
			opt_nobuild=1
			;;
		-T|--no-tests)
			opt_notests=1
			;;
		-r|--ref)
			shift
			opt_ref=$1
			[ -n "$opt_ref" ] || die "Invalid --ref"
			;;
		-a|--archives)
			shift
			opt_archives="$(echo "$1" | tr ',' ' ')"
			for artype in $opt_archives; do
				case "$artype" in
					tar|tar.bz2|tar.gz|tar.xz|zip|7z) ;; # ok
					*) die "Invalid archiving method: $artype" ;;
				esac
			done
			;;
		-V|--extraversion)
			shift
			opt_extraversion="$1"
			[ -n "$opt_extraversion" ] || die "Invalid --extraversion"
			;;
		*)
			die "Invalid option: $1"
			;;
		esac
		shift
	done

	detect_repos_type
	make_checkout
	detect_versioning
	relocate_checkout
	make_archives
	make_testbuild
	make_regression_tests
	make_checkout_remove
	make_archive_signatures
	make_tag
	move_files
	cleanup
}

# vim: syntax=sh
